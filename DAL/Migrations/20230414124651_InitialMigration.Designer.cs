// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230414124651_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserProduct");
                });

            modelBuilder.Entity("DAL.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DAL.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d0e49b1-7f90-4c55-b689-6654a7177476"),
                            Description = "Bakery",
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = new Guid("990638f8-f1e5-49dd-b73d-86b24eefcf9f"),
                            Description = "Beverage",
                            Name = "Beverage"
                        },
                        new
                        {
                            Id = new Guid("ead27726-c61f-405b-9415-45592a9aaaad"),
                            Description = "Personal Care",
                            Name = "Personal Care"
                        },
                        new
                        {
                            Id = new Guid("b6aa08b8-a381-4c52-98d7-f7a18b2f839c"),
                            Description = "Dental",
                            Name = "Dental"
                        },
                        new
                        {
                            Id = new Guid("1a7fed9f-63a6-4f1c-96a0-73e0de797887"),
                            Description = "Meat and Poultry",
                            Name = "Meat and Poultry"
                        },
                        new
                        {
                            Id = new Guid("941d1dbf-3da0-4fb0-bba9-abbdc9d836b7"),
                            Description = "Seafood",
                            Name = "Seafood"
                        },
                        new
                        {
                            Id = new Guid("49e70c8c-902b-4f23-8dc6-fdaba3d3fded"),
                            Description = "Dairy",
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("d64ac173-84b5-4ab2-b7e1-93e06e9f3a31"),
                            Description = "Snack",
                            Name = "Snack"
                        },
                        new
                        {
                            Id = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Fruit",
                            Name = "Fruit"
                        });
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("838b6c72-adee-450e-87f5-56df8e86994d"),
                            CategoryId = new Guid("990638f8-f1e5-49dd-b73d-86b24eefcf9f"),
                            Description = "Monster Energy Drink",
                            ImageURL = "https://assets.woolworths.com.au/images/2010/329812.jpg?impolicy=wowcdxwbjbx&w=900&h=900",
                            Name = "Monster Energy Drink",
                            Price = 3.9900000000000002
                        },
                        new
                        {
                            Id = new Guid("fc41ff1d-e663-4cd9-83ce-18be3db3121e"),
                            CategoryId = new Guid("1a7fed9f-63a6-4f1c-96a0-73e0de797887"),
                            Description = "Minced Meat",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-FYbNOJNwTrorlSQ6Q8r3qhrIzlW-PAPHrg&usqp=CAU",
                            Name = "Minced Meat",
                            Price = 17.75
                        },
                        new
                        {
                            Id = new Guid("9b84906f-4ec9-42a2-8269-22daaaca56c7"),
                            CategoryId = new Guid("49e70c8c-902b-4f23-8dc6-fdaba3d3fded"),
                            Description = "Almond Milk",
                            ImageURL = "https://assets.woolworths.com.au/images/2010/901450.jpg?impolicy=wowcdxwbjbx&w=900&h=900",
                            Name = "Almond Milk",
                            Price = 6.9900000000000002
                        },
                        new
                        {
                            Id = new Guid("bb4b35a1-d7b4-4196-b85a-afa478a086d5"),
                            CategoryId = new Guid("d64ac173-84b5-4ab2-b7e1-93e06e9f3a31"),
                            Description = "Doritos",
                            ImageURL = "https://www.doritos.com/sites/doritos.com/files/2018-08/new-nacho-cheese.png",
                            Name = "Doritos",
                            Price = 3.4900000000000002
                        },
                        new
                        {
                            Id = new Guid("7afa6882-7f50-4ef7-8198-18c0faf20c47"),
                            CategoryId = new Guid("941d1dbf-3da0-4fb0-bba9-abbdc9d836b7"),
                            Description = "Shrimp",
                            ImageURL = "https://www.dhhenderson.co.nz/wp-content/uploads/2020/04/381.png",
                            Name = "Shrimp",
                            Price = 21.989999999999998
                        },
                        new
                        {
                            Id = new Guid("fd21993c-9137-4065-a67b-a44b5fc86466"),
                            CategoryId = new Guid("b6aa08b8-a381-4c52-98d7-f7a18b2f839c"),
                            Description = "Tooth Brush",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpAnFUVxkzfJcP3mQO8_TTwJ65Qnw82dMUOg&usqp=CAU",
                            Name = "Tooth Brush",
                            Price = 8.9900000000000002
                        },
                        new
                        {
                            Id = new Guid("b9ea3a02-6e5a-4f43-b2e8-c5a9a5895416"),
                            CategoryId = new Guid("1d0e49b1-7f90-4c55-b689-6654a7177476"),
                            Description = "Banana Bread",
                            ImageURL = "https://loshusansupermarket.com/product_images/d/597/KISS_BANANA_BREAD_72G_tagged__00890_zoom.jpg",
                            Name = "Banana Bread",
                            Price = 5.4900000000000002
                        },
                        new
                        {
                            Id = new Guid("3008f59b-9926-4476-a27f-a16294044bc4"),
                            CategoryId = new Guid("ead27726-c61f-405b-9415-45592a9aaaad"),
                            Description = "Deodorant",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQfd1I1jKbThIGhMOYOUyMqxdFiXopcdNeMgw&usqp=CAU",
                            Name = "Deodorant",
                            Price = 6.4900000000000002
                        },
                        new
                        {
                            Id = new Guid("84415975-4a18-4762-9e3b-8cc7e6c7e7b1"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Banana",
                            ImageURL = "https://www.supermarketperimeter.com/ext/resources/bananas-sp.jpg?height=667&t=1550787674&width=1080",
                            Name = "Banana",
                            Price = 6.9900000000000002
                        },
                        new
                        {
                            Id = new Guid("fb8e13c5-e4e5-4565-b56e-c2a1ab880324"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Apple",
                            ImageURL = "https://www.dhhenderson.co.nz/wp-content/uploads/2020/04/1381781721.jpg",
                            Name = "Apple",
                            Price = 7.8899999999999997
                        },
                        new
                        {
                            Id = new Guid("730d9530-9913-40f1-a7b2-2a96ba7d9940"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Peach",
                            ImageURL = "https://m.media-amazon.com/images/W/IMAGERENDERING_521856-T1/images/I/71TIMGiDE9L._AC_SL1200_.jpg",
                            Name = "Peach",
                            Price = 10.789999999999999
                        },
                        new
                        {
                            Id = new Guid("3505780f-4511-42c4-b7a1-18809a0bb14a"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Pear",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbOprtVHqqGoOtlUpVmtfSkcz3pQNeucvmnQ&usqp=CAU",
                            Name = "Pear",
                            Price = 5.6900000000000004
                        },
                        new
                        {
                            Id = new Guid("907624f9-07dc-4164-936c-88efc0454b37"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Lemon",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQbjqwOLzK0kH4i9Xyy75OV21ShL8VWRqDHtA&usqp=CAU",
                            Name = "Lemon",
                            Price = 16.989999999999998
                        },
                        new
                        {
                            Id = new Guid("6841cf9c-35b3-40d4-bb09-6da813d29a0b"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Orange",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTAMzbzLWOy4yprdYfG_LC6H7NtD3AbAv3UWw&usqp=CAU",
                            Name = "Orange",
                            Price = 9.4900000000000002
                        },
                        new
                        {
                            Id = new Guid("8ce0fd1e-e29f-4039-a44e-66dbbe1a6d4f"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "Avocado",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQHxBWZ-d1QmXgXd14ot7ySXecYecJOEUhgiQ&usqp=CAU",
                            Name = "Avocado",
                            Price = 6.9900000000000002
                        },
                        new
                        {
                            Id = new Guid("efb8cc35-0e2e-4f64-91e8-2e1fe19fb7a0"),
                            CategoryId = new Guid("bc9f2bec-70d8-4655-899e-da988b29697f"),
                            Description = "JackFruit",
                            ImageURL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTONI8-aZErJ6p5lTZpU4_TpENpjhjUmFzLrg&usqp=CAU",
                            Name = "JackFruit",
                            Price = 7.4900000000000002
                        },
                        new
                        {
                            Id = new Guid("9dbdaaff-ca16-4405-af5c-30f842d48e27"),
                            CategoryId = new Guid("ead27726-c61f-405b-9415-45592a9aaaad"),
                            Description = "Soap",
                            ImageURL = "https://www.tastenature.co.nz/wp-content/uploads/2021/10/Farmers-Pumice-Soap-2x100g-900-1.jpg",
                            Name = "Soap",
                            Price = 2.4900000000000002
                        },
                        new
                        {
                            Id = new Guid("d3ed8dd4-61d3-45df-8f5b-656da8e66b49"),
                            CategoryId = new Guid("ead27726-c61f-405b-9415-45592a9aaaad"),
                            Description = "Shampoo",
                            ImageURL = "https://www.beautyheaven.com.au/wp-content/uploads/2021/11/10-2.png",
                            Name = "Shampoo",
                            Price = 3.4900000000000002
                        },
                        new
                        {
                            Id = new Guid("19b0449d-58d5-4ee1-96d5-ab5f22e3d3c5"),
                            CategoryId = new Guid("ead27726-c61f-405b-9415-45592a9aaaad"),
                            Description = "Conditioner",
                            ImageURL = "https://assets.woolworths.com.au/images/2010/486564.jpg?impolicy=wowcdxwbjbx&w=900&h=900",
                            Name = "Conditioner",
                            Price = 5.29
                        });
                });

            modelBuilder.Entity("DAL.Models.ProductPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("778db360-3aec-4a56-8832-44a12dc08ca3"),
                            ProductId = new Guid("838b6c72-adee-450e-87f5-56df8e86994d"),
                            PromotionId = new Guid("42b5df48-713e-400c-ba4a-6865db344cb0")
                        },
                        new
                        {
                            Id = new Guid("e558441f-e774-448d-9781-66780851a370"),
                            ProductId = new Guid("fc41ff1d-e663-4cd9-83ce-18be3db3121e"),
                            PromotionId = new Guid("2cf96105-34d3-4808-931c-18e2f400d267")
                        },
                        new
                        {
                            Id = new Guid("a805c322-8736-44ce-a1ba-e59dd553b57a"),
                            ProductId = new Guid("fd21993c-9137-4065-a67b-a44b5fc86466"),
                            PromotionId = new Guid("9f0d4385-03f1-4cd9-91f9-b198caa90d84")
                        });
                });

            modelBuilder.Entity("DAL.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42b5df48-713e-400c-ba4a-6865db344cb0"),
                            Discount = 12.0,
                            End = new DateTime(2023, 4, 17, 0, 46, 51, 238, DateTimeKind.Local).AddTicks(1860),
                            Start = new DateTime(2023, 4, 15, 0, 46, 51, 238, DateTimeKind.Local).AddTicks(1768)
                        },
                        new
                        {
                            Id = new Guid("2cf96105-34d3-4808-931c-18e2f400d267"),
                            Discount = 25.0,
                            End = new DateTime(2023, 4, 20, 0, 46, 51, 238, DateTimeKind.Local).AddTicks(1882),
                            Start = new DateTime(2023, 4, 15, 0, 46, 51, 238, DateTimeKind.Local).AddTicks(1878)
                        },
                        new
                        {
                            Id = new Guid("9f0d4385-03f1-4cd9-91f9-b198caa90d84"),
                            Discount = 50.0,
                            End = new DateTime(2023, 4, 30, 0, 46, 51, 238, DateTimeKind.Local).AddTicks(1892),
                            Start = new DateTime(2023, 4, 15, 0, 46, 51, 238, DateTimeKind.Local).AddTicks(1888)
                        });
                });

            modelBuilder.Entity("DAL.Models.UserProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProducts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PromotionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsId", "PromotionsId");

                    b.HasIndex("PromotionsId");

                    b.ToTable("ProductPromotion");
                });

            modelBuilder.Entity("DAL.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("ApplicationUserProduct", b =>
                {
                    b.HasOne("DAL.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.Cart", b =>
                {
                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Product", b =>
                {
                    b.HasOne("DAL.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DAL.Models.ProductPromotion", b =>
                {
                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DAL.Models.UserProduct", b =>
                {
                    b.HasOne("DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductPromotion", b =>
                {
                    b.HasOne("DAL.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
